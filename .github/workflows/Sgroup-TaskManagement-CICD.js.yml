# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js Sgroup_TaskManagement CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
    # Pull code trên git repository về máy ảo Ubuntu chạy job này
      - name: Checkout code and pull from git repository
        uses: actions/checkout@v4
    # Login to Docker Hub
      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    # Build docker image
      - name: Build and push docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/sgroup_betaskmanagement:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/sgroup_betaskmanagement:latest
  deploy:
    name: SSH into EC2 instance
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: SSH into EC2 instance and Deploy 
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Check and create new file .env
            if [ -f .env ]; then
              echo ".env existed";
              rm .env || true;
              echo ".env has been removed";
              touch .env;
            else 
              touch .env;
            fi 
            # Set up file .env
            echo "PORT=${{ secrets.PORT }}" >> .env
            echo "MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
            echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
            echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
            echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
            echo "EMAIL_SERVICE=${{ secrets.EMAIL_SERVICE }}" >> .env
            echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
            echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
            # Pull Docker Image and Run
            docker pull ${{ secrets.DOCKER_USERNAME }}/sgroup_betaskmanagement:latest
            docker network inspect cunity-network >/dev/null 2>&1 || docker network create cunity-network
            docker rm -f taskapp || true
            docker run -d --name taskapp --network cunity-network --env-file .env \
            -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
            ${{ secrets.DOCKER_USERNAME }}/sgroup_betaskmanagement:latest
    
      
